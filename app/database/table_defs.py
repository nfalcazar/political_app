from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects.postgresql import JSON
import os

db_url = os.environ['TIMESCALE_SERVICE_URL']

class Base(DeclarativeBase):
    pass

#keys_embeddings = ["id", "metadata", "contents", "embedding"]
class EmbeddingTable(Base):
    '''
    Vector Store holding Canon Claims

    Table: embeddings
    id          : str   - UUID formed from time
    metadata    : JSON  - data_id, category
    contents    : str   - the canoncial claim stored
    embedding   : arr   - vector embedding generated by AI model
    '''
    __tablename__ = "embeddings"
    id: Mapped[str] = mapped_column(primary_key=True)
    metadata_: Mapped[dict] = mapped_column(JSON)
    content: Mapped[str]
    embedding: Mapped[list[float]] = mapped_column(Vector(1536))


#keys_edges = ["src_type", "src_id", "dest_type", "dest_id", "metadata"]
class EdgeTable(Base):
    __tablename__ = "edges"
    id: Mapped[str] = mapped_column(primary_key=True)
    src_type: Mapped[str]
    src_id: Mapped[str]
    dest_type: Mapped[str]
    dest_id: Mapped[str]
    metadata_: Mapped[dict] = mapped_column(JSON)


class FactsTable(Base):
    __tablename__ = "facts"
    id: Mapped[str] = mapped_column(primary_key=True)
    text: Mapped[str]
    source_id: Mapped[str]
    metadata_: Mapped[dict] = mapped_column(JSON)


# keys_sources = []
class SourcesTable(Base):
    __tablename__ = "sources"
    id: Mapped[str] = mapped_column(primary_key=True)
    description: Mapped[str]
    link: Mapped[str]
    metadata_: Mapped[dict] = mapped_column(JSON)




# keys_claims = []
# class ClaimsTable(Base):
#     pass


# tnames_to_class_keys = {
#     "embeddings": EmbeddingTable,
#     "edges" : EdgeTable,
#     "claims" : ClaimsTable,
#     "sources" : SourcesTable
# }