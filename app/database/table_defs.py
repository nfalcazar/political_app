from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects.postgresql import JSON

class Base(DeclarativeBase):
    pass

#keys_embeddings = ["id", "metadata", "contents", "embedding"]
class CanonClaimTable(Base):
    '''
    Vector Store holding Canon Claims

    Table: canon_claims
    id          : str   - UUID formed from time
    metadata    : JSON  - data_id, category
    contents    : str   - the canoncial claim stored
    embedding   : arr   - vector embedding generated by AI model
    '''
    __tablename__ = "canon_claims"
    id: Mapped[str] = mapped_column(primary_key=True)
    metadata_: Mapped[dict] = mapped_column(JSON)
    content: Mapped[str]
    embedding: Mapped[list[float]] = mapped_column(Vector(1536))


# keys_claims = []
class ClaimsTable(Base):
    __tablename__ = "claims"
    id: Mapped[str] = mapped_column(primary_key=True)
    text: Mapped[str]
    speaker: Mapped[str]
    date: Mapped[str]
    verified: Mapped[bool]
    metadata_: Mapped[dict] = mapped_column(JSON)


class FactsTable(Base):
    __tablename__ = "facts"
    id: Mapped[str] = mapped_column(primary_key=True)
    content: Mapped[str]
    embedding: Mapped[list[float]] = mapped_column(Vector(1536))
    metadata_: Mapped[dict] = mapped_column(JSON)


# keys_sources = []
class SourcesTable(Base):
    __tablename__ = "sources"
    id: Mapped[str] = mapped_column(primary_key=True)
    description: Mapped[str]
    link: Mapped[str]
    verified: Mapped[bool]
    metadata_: Mapped[dict] = mapped_column(JSON)


#keys_edges = ["src_type", "src_id", "dest_type", "dest_id", "metadata"]
class EdgeTable(Base):
    __tablename__ = "edges"
    id: Mapped[str] = mapped_column(primary_key=True)
    src_type: Mapped[str]
    src_id: Mapped[str]
    dest_type: Mapped[str]
    dest_id: Mapped[str]
    relationship_type: Mapped[str]
    metadata_: Mapped[dict] = mapped_column(JSON)
