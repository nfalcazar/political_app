from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session
from sqlalchemy import create_engine, select
from pgvector.sqlalchemy import Vector
from sqlalchemy.dialects.postgresql import JSON
import os

db_url = os.environ['TIMESCALE_SERVICE_URL']

class Base(DeclarativeBase):
    pass

keys_embeddings = ["id", "metadata", "contents", "embedding"]
class EmbeddingTable(Base):
    '''
    Stores the embeddings related to Canonical claims

    Table: embeddings
    id          : str   - UUID formed from time
    metadata    : JSON  - data_id, category
    contents    : str   - the canoncial claim stored
    embedding   : arr   - vector embedding generated by AI model
    '''
    __tablename__ = "embeddings"
    id: Mapped[str] = mapped_column(primary_key=True)
    metadata_: Mapped[dict] = mapped_column(JSON)
    contents: Mapped[str]
    embedding: Mapped[list[float]] = mapped_column(Vector(1536))


keys_edges = ["src_type", "src_id", "dest_type", "dest_id", "metadata"]
class EdgeTable(Base):
    __tablename__ = "edges"
    src_type: Mapped[str]
    src_id: Mapped[str]
    dest_type: Mapped[str]
    dest_id: Mapped[str]
    metadata_: Mapped[dict] = mapped_column(JSON)


keys_claims = []
class ClaimsTable(Base):
    pass


keys_sources = []
class SourcesTable(Base):
    pass


keys_events = []
class EventsTable(Base):
    pass


tnames_to_class_keys = {
    "embeddings": (EmbeddingTable, keys_embeddings),
    "edges" : (EdgeTable, keys_edges),
    "claims" : (ClaimsTable, keys_claims),
    "sources" : (SourcesTable, keys_sources),
    "events" : (EventsTable, keys_events)
}

def add_entry_to_table(table_name, entry):
    '''
    Inputs:
    client      - timescale_vector.client
    entry       - list(dict)  {column_name : value}
    table_name  - str   Name of table to add to

    Returns:
    None
    '''
    #TODO: how to check good conn
    sql_engine = create_engine(db_url)


    if table_name not in tnames_to_class_keys.keys():
        raise ValueError("table_name not in list of valid tables")
    

    